using UnityEngine;
using System.Collections;
using System;
using System.Collections.Generic;
using UnityEngine.UI;

public class main : MonoBehaviour
{
	/// 
	/// 目标列表
	/// 
	public List<GameObject> Targets;
    
    ///
    ///告警信息 
	///
    public Transform Dangerous;
    private Transform dangerous;
    /// 
	/// 当前目标
	/// 
	public List<MachineState> MachineStates = new List<MachineState>();
    public string alarmMsg;//告警信息

	// Use this for initialization
	void Start()
	{
		Targets = new List<GameObject>();
		//UpdateTargetList();
		Application.ExternalCall("UnityStart");

	}

    void Update()
    {
        if (MachineStates.Count > 0)
        {
            foreach (var state in MachineStates)
            {

                string subDir = state.mac_code.Substring(0, 1);
                GameObject machine = GameObject.Find("Machines/" + subDir + "/" + state.mac_code);
                if(machine=null)
                {
                    print("未找到"+machine.name+"机台");
                }
                if (machine != null)
                {
                    switch (state.mac_state)
                    {
                        case 0:
                            machine.GetComponentInChildren<Renderer>().material.color = Color.white;
                            machine.transform.Find("Back").GetComponent<Renderer>().material.color = Color.white;
                            try
                            {
                                if (machine.transform.Find("Dangerous") != null)
                                {
                                    Destroy(machine.transform.Find("Dangerous").gameObject);
                                }
                            }
                            catch { }
                            machine.GetComponentInChildren<Prompt>().haveMsg = false;
                            break;
                        case 1:
                            machine.GetComponentInChildren<Renderer>().material.color = Color.yellow;
                            machine.transform.Find("Back").GetComponent<Renderer>().material.color = Color.yellow;
                            try
                            {
                                if (machine.transform.Find("Dangerous") != null)
                                {
                                    Destroy(machine.transform.Find("Dangerous").gameObject);
                                }
                            }
                            catch { }
                            machine.GetComponentInChildren<Prompt>().haveMsg = false;
                            break;
                        case 2:
                            machine.GetComponentInChildren<Renderer>().material.color = Color.green;
                            machine.transform.Find("Back").GetComponent<Renderer>().material.color = Color.green;
                            try
                            {
                                if (machine.transform.Find("Dangerous") != null)
                                {
                                    Destroy(machine.transform.Find("Dangerous").gameObject);
                                }
                            }
                            catch { }
                            machine.GetComponentInChildren<Prompt>().haveMsg = false;
                            break;
                        case 3:
                            machine.GetComponentInChildren<Renderer>().material.color = Color.red;
                            machine.transform.Find("Back").GetComponent<Renderer>().material.color = Color.red;
                            if (machine.GetComponentInChildren<Prompt>().haveMsg == false)//如果报警开关为关闭状态就打开它然后生成报警信息
                            {
                                dangerous = Instantiate(Dangerous, new Vector3(0, 0, 0),Dangerous.transform.rotation);
                                dangerous.transform.parent = machine.transform;
                                dangerous.name = "Dangerous";
                                dangerous.transform.localPosition = new Vector3(-4, 6, 4);
                                dangerous.transform.GetComponentInChildren<Text>().text = alarmMsg;
                                machine.GetComponentInChildren<Prompt>().haveMsg = true;
                                dangerous.transform.eulerAngles = new Vector3(123,0,180);
                            }
                            break;
                        case 4:
                            machine.GetComponentInChildren<Renderer>().material.color = new Color(0.87f, 0.72f, 0.53f);
                            machine.transform.Find("Back").GetComponent<Renderer>().material.color = new Color(0.87f, 0.72f, 0.53f);
                            try
                            {
                                if (machine.transform.Find("Dangerous") != null)
                                {
                                    Destroy(machine.transform.Find("Dangerous").gameObject);
                                }
                            }
                            catch { }
                            machine.GetComponentInChildren<Prompt>().haveMsg = false;
                            break;
                    }
                    machine = null;

                }
            }
        }
    }
	public void RefreshStates(string msg)
	{
		var hasMac = false;
		string[] recvMac = msg.Split('|');
		if (recvMac.Length > 0)
		{
			foreach (var state in MachineStates)
			{
				if (state.mac_code == recvMac[0])
				{
					state.mac_state = int.Parse(recvMac[1]);
					hasMac = true;
                    int stateID = int.Parse(recvMac[1]);
                    if (recvMac.Length > 2 && (stateID == 3))//报警时候赋值报警信息
                    {
                        alarmMsg = recvMac[2];
                    }
				}
			}
			if (!hasMac)
			{
				var mac = new MachineState();
				mac.mac_code = recvMac[0];
                int stateID = int.Parse(recvMac[1]);
				mac.mac_state = int.Parse(recvMac[1]);
                if (recvMac.Length > 2 && (stateID == 3))//报警时候赋值报警信息
                {
                    alarmMsg = recvMac[2];
                }
				MachineStates.Add(mac);
			}
		}
	}

	/// 
	/// 更新目标列表
	/// 
	public void UpdateTargetList()
	{
		//更新所有带Enemy标记的游戏对象到Targets列表
		Targets.Clear();
		for (int i = 0; i < 86; i++)
		{
			if (i < 62 || i > 71)
			{
				var creature = GameObject.Find("Machines/" + (i + 1).ToString());
				if (creature != null)
					Targets.Add(creature);
			}
		}
	}
}

public class MachineState
{
	public string mac_code { get; set; }
	public int mac_state { get; set; }
}
